<?php

namespace Anax\Route;

use PHPUnit\Framework\TestCase;
use Anax\Route\Exception\ForbiddenException;
use Anax\Route\Exception\InternalErrorException;
use Anax\Route\Exception\NotFoundException;

/**
 * Routes.
 */
class RouterInternalTest extends TestCase
{
    /**
     * Internal route 403 can be generated by throwing exception.
     */
    public function testInternal403Generate()
    {
        $router = new Router();
        $router->addInternalRoute(
            "403",
            function () {
                return "403";
            }
        );

        $router->add("test403", function () {
            throw new ForbiddenException("Message 403.");
        });

        $res = $router->handle("test403");
        $this->assertEquals("403", $res);

        $routes = $router->getAll();
        $this->assertEquals(1, count($routes));

        $routes = $router->getInternal();
        $this->assertEquals(1, count($routes));
    }



    /**
     * Internal route 404 can be generated by throwing exception.
     */
    public function testInternal404Generate()
    {
        $router = new Router();
        $router->addInternalRoute(
            "404",
            function () {
                return "404";
            }
        );

        $router->add("test404", function () {
            throw new NotFoundException("Message 404.");
        });

        $res = $router->handle("test404");
        $this->assertEquals("404", $res);

        $routes = $router->getAll();
        $this->assertEquals(1, count($routes));

        $routes = $router->getInternal();
        $this->assertEquals(1, count($routes));
    }



    /**
     * Internal route 404 is triggered when no route is found.
     */
    public function testInternal404NoRouteIsFound()
    {
        $router = new Router();
        $router->addInternalRoute(
            "404",
            function () {
                return "404";
            }
        );

        $res = $router->handle("test404");
        $this->assertEquals("404", $res);

        $routes = $router->getAll();
        $this->assertEquals(0, count($routes));

        $routes = $router->getInternal();
        $this->assertEquals(1, count($routes));
    }



    /**
     * Internal route 500 throws exception during development.
     *
     * @expectedException \Exception
     */
    public function testInternal500Development()
    {
        $router = new Router();
        $router->addInternalRoute(
            "500",
            function () {
                return "500";
            }
        );

        $router->add("test500", function () {
            throw new \Exception("Message 500.");
        });

        $router->handle("test500");
    }



    /**
     * Internal route 500 handles during production.
     */
    public function testInternal500Production()
    {
        $router = new Router();
        $router->addInternalRoute(
            "500",
            function () {
                return "500";
            }
        );
        $router->setMode(Router::PRODUCTION);

        $router->add("test500", function () {
            throw new \Exception("Message 500.");
        });

        $res = $router->handle("test500");
        $this->assertEquals("500", $res);

        $routes = $router->getAll();
        $this->assertEquals(1, count($routes));

        $routes = $router->getInternal();
        $this->assertEquals(1, count($routes));
    }



    /**
     * Internal route 500 can be generated by throwing exception.
     */
    public function testInternal500Generate()
    {
        $router = new Router();
        $router->addInternalRoute(
            "500",
            function () {
                return "500";
            }
        );

        $router->add("test500", function () {
            throw new InternalErrorException("Message 500.");
        });

        $res = $router->handle("test500");
        $this->assertEquals("500", $res);

        $routes = $router->getAll();
        $this->assertEquals(1, count($routes));

        $routes = $router->getInternal();
        $this->assertEquals(1, count($routes));
    }
}
